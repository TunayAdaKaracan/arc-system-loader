picotron cartridge // www.picotron.net
version 2

:: gui.lua
--[[pod_format="raw",created="2024-07-14 21:01:47",modified="2024-07-15 13:14:44",revision=29]]
--gui.lua by 369px
local logo = --[[pod_type="gfx"]]unpod("b64:bHo0APEDAABEBAAA8E1weHUAQyCgjATw--8fDxPwiQ5gLvCDHpBO8H4O0E7weh7gbvB3HvABbvB1LoAOcG7wcy6gTiB_8HEu4N7wby7wAd7wbS7wA97wbC7wA_7wai7wA-4B8Gke8AX_AAcA8AQG-gDwZy7wBv4B8GYe8Af_AfBlDgAwA-BkHAAQBAcA8B0E-gfwYi7wAf4K8GIe0P4P8GAuoP4S8GAugP4U8GAegA7wAP4F8F4u8A3_AgcAYBIOAL7wXT8A8A8L8Fwu8Aj_CvBbLhAe8Av_A-BbfnDeYP4B8FluUJ6cAPFEWl4wfvAIvvBaThB_8Ayu8FsuAG7wEa7wWX7wFZ7wV37wGY7wVW7wHI7wU17wH37wUl7wIm7wUU7wI37wT07wJW7wTk7wJ27wTU7wKG7wS07wKl4GADFO8EwGAFBLXvAqPh4AAwYAEC42APBrKD7wUD7wKC7wUj7wJj7wUk7wJS7wVD7wJC7wVj7wIj7wVz7wIG7wUn7wHq7wS87wHO7wRf4B8Br_AvBB-gPwGf4G8D3_BfAY-gjwO34AvvAX-gnwOm4wvvAVniDe8DleUD4AbvAUbkDu8DhegB4QXvATXlD_AfA2TrANAPAAEj5gHnB_8DZOwA4wTvAQDgDQnvA0TtAOQE7wDy7wAg0A8CLgDkA_8A4ucA6APhBe8DNO8Acu8A0e8AM_IF7wMz7wCR7wDA7wBC4wXvAwbvALDvAKDgDwCFBO8C9_8DsuUF7wLY7wOx5wXvArPvBBCADwAypO8EEOkE7wKV7wQQ6gTvAoXg4BISdeRAHwHU7wUU4ALvAgXvBRPgBO8B5u8FGe8B1u8FKu8BtO8Fae8BpO8Fie8Bhu8FiOBgAwIA4AAgDxOP4WsD4QPvAWLgA_8AD_PKAuIF7wFT4APuD_PJAeQG7wFD4QPtD_JwAO8AAu8AJu8BJOIC7gTgAO8DEu8AKO8A9uMB7QHvA28gBBDm7wBAwAkQOO8AwOAH7wAw4A9AYFbvALHgCO8AIe8DYe8AZ_8Ane8AEMAEEHfvAJDAClBY7wBs7wBS7wNQwAARgAcQSe8AXu8AQYAIADTgBO8AT_AlkA0TUe8AI_IE7wA-4E8AIPAHIIXvADvvAKDABxfvAA-gHwBg0AcQeu0P4H8AAMAHEF3rBukL6gDACRBP4AoC6w-gFwDgChA-4CkA6wLoCeQA8A8AkBrmAucA7wB25AHiAe8DUOwM6wHvAOPtAMAFCg-gGgDssBoAIO8DUOQP4IoA7AARAEDgCggA4AvjAukA7wIA4AcfACbjAe8CoLAGEGPjAe8CkLAEEILvAuCQBBCh7wLQkAH0kGAASg------------hQ==")

gui = create_gui()

local logoGui = gui:attach{x=160 - 30,y=10,width=160+100,height=167,
			draw=function(self)
				spr(logo,0 + 30, 0)
				print("Choose an Operating System",15 + 30, 150,7)
				if not any_input then
					print(("You will boot to %s automatically in %s seconds"):format(all_os[selected_i], tostr(math.floor(timer - time() - start))), 0, 160, 7)
				end
			end		
}

local OS_list = gui:attach{x=160,y=logoGui.height+20,width=160,height=80,
			draw=function(self)
				--rectfill(0,0,self.width,self.height,7)
				draw_OS_list()
			end	
}


function draw_OS_list()

	for i, os in ipairs(all_os) do
		text_color = 19
		bg_color = 0
		
		if selected_i == i then
			text_color = 7
			bg_color = 17
		end
		
		rectfill(0, (i-1)*11, get_display():width(), i*11-1, bg_color)
		print(os, 2, (i-1)*11+2, text_color)
	end
end
:: main.lua
--[[pod_format="raw",created="2024-07-13 20:44:58",modified="2024-07-15 13:10:43",revision=26]]
include "gui.lua"

all_os = ls("/systems")
systems_data = fetch_metadata("/systems")
selected_i = 1 -- fallback if system is no longer available.

for i, os in ipairs(all_os) do
	if systems_data.os == os then
		selected_i = i
	end
end

timer = systems_data.timer or 5
start = time()
any_input = false

function _draw()
	cls(0)
	gui:draw_all()
end

function _update()
	if keyp("down") then
		selected_i = min(selected_i+1, #all_os)
		any_input = true
	elseif keyp("up") then
		selected_i = max(selected_i-1, 1)
		any_input = true
	elseif keyp("space") or (time() - start > timer and not any_input) then
		store_metadata("/systems", {os=all_os[selected_i]})
		
		-- if it is on type 2 setting, do not set bypass to true.
		-- Changing type 2 -> type 1 while bypass set to true will run the selected system immediatly.
		-- Prevents unwanted behaviour.
		if fetch_metadata("/systems").type == 1 then
			store_metadata("/systems", {bypass=true})
		end
		
		send_message(2, {event="reboot"})
	end
end
:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTEyIDE5OjMwOjU1Iixtb2RpZmllZD0iMjAyNC0w
OS0yNyAyMToxNzo1MSIscnVudGltZT0xMCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249ImdmeC8wLmdm
eCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5k
ZXg9M30se2xvY2F0aW9uPSJzZngvMC5zZngiLHdvcmtzcGFjZV9pbmRleD00fX1dXQ==
:: [eoc]
